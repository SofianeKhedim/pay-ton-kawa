# version: "3.8"

services:
  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - mspr-net

  # Order Service
  order-service:
    build: ./order-service
    platform: linux/amd64
    container_name: order-service
    ports:
      - "3000:3000"
    env_file:
      - ./order-service/.env
    depends_on:
      - rabbitmq
    networks:
      - mspr-net

  # MySQL Database for Product Service
  mysql-container:
    image: mariadb:10.11
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: ""
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: db_product
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - mspr-net

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: product-service
    ports:
      - "8089:8089"
    depends_on:
      - mysql-container
      - rabbitmq
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container:3306/db_product?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
      SERVER_PORT: 8089
    networks:
      - mspr-net

  # PostgreSQL Database for Client API
  postgres:
    image: postgres:15-alpine
    container_name: client-api-postgres
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_DB: ${DB_NAME:-payetonkawa_clients}
      POSTGRES_USER: ${DB_USERNAME:-payetonkawa_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - mspr-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-payetonkawa_user} -d ${DB_NAME:-payetonkawa_clients}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Client API
  client-api:
    build:
      context: ./client-api
      dockerfile: Dockerfile
    container_name: client-api-app
    env_file:
      - ./client-api/.env
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-payetonkawa_clients}
      DB_USERNAME: ${DB_USERNAME:-payetonkawa_user}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8081
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC"
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mspr-net
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs

  # Code Quality Analysis
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - mspr-net

  # Monitoring
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - mspr-net

  # Monitoring Dashboard
  grafana:
    image: grafana/grafana:9.5.15  # Version stable spécifique
    container_name: grafana
    platform: linux/amd64
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana_data:/var/lib/grafana
    user: "472:472"  # User/Group ID spécifique Grafana
    networks:
      - mspr-net
    depends_on:
      - prometheus
    restart: unless-stopped
    command: >
      sh -c "chown -R 472:472 /var/lib/grafana &&
             /run.sh"

volumes:
  mysql-data:
  postgres_data:
  app_logs:
  sonarqube_data:
  sonarqube_extensions:
  grafana_data:
  grafana_config:

networks:
  mspr-net:
    driver: bridge