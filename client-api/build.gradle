plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

// Project metadata
group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Client API microservice for PayeTonKawa coffee distribution platform'

// Java configuration
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Gradle configurations
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// External dependency versions
ext {
    springdocVersion = '2.3.0'
    testcontainersVersion = '1.19.3'
    commonsLangVersion = '3.14.0'
    jjwtVersion = '0.12.3'
}

dependencies {
    // Core Spring Boot starters for REST API functionality
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Security framework for API authentication and authorization
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Validation des mots de passe
    implementation 'org.springframework.security:spring-security-crypto'

    // Production monitoring and health checks
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Database drivers - H2 for development, PostgreSQL for production
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // Development tools for hot reload and productivity
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // API documentation generation with OpenAPI 3.0 specification
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Utility libraries for common operations
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"

    // JSON serialization/deserialization with Java 8 time support
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Configuration metadata generation for IDE support
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Testing framework with Spring Boot test slices
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Integration testing with real database containers
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'

    // HTTP client mocking for external API testing
    testImplementation 'com.squareup.okhttp3:mockwebserver'

    // 
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Prometheus et Grafana
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'


}

// Testcontainers BOM for version alignment
dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

// Test execution configuration
tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    maxHeapSize = "1g"
    jvmArgs '-XX:+UseG1GC'
    finalizedBy jacocoTestReport

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "short"
        showStandardStreams = false
    }
}

// Code coverage report generation
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/ClientApiApplication.class',  // CORRIGÉ : ClientApiApplication au lieu de UserApiApplication
                    '**/config/**',
                    '**/dto/**',
                    '**/entity/**',
                    '**/exception/**',
                    '**/security/AuthEntryPointJwt.class'
            ])
        }))
    }
}

// Code coverage threshold enforcement as per project requirements (95%)
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.95
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
        }
    }
}
// check.dependsOn jacocoTestCoverageVerification

// Compilation configuration
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

// Custom tasks
task runDev(type: org.springframework.boot.gradle.tasks.run.BootRun) {
    group = 'application'
    description = 'Run application with development profile using H2 database'
    systemProperty 'spring.profiles.active', 'dev'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.clientapi.ClientApiApplication'  // CORRIGÉ
}

task runProd(type: org.springframework.boot.gradle.tasks.run.BootRun) {
    group = 'application'
    description = 'Run application with production profile using PostgreSQL database'
    systemProperty 'spring.profiles.active', 'prod'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.clientapi.ClientApiApplication'  // CORRIGÉ
}

task cleanBuild {
    group = 'build'
    description = 'Execute complete clean build with tests and coverage verification'
    dependsOn clean, build
}

// JAR configuration
jar {
    enabled = false
    archiveClassifier = ''
}

bootJar {
    enabled = true
    archiveClassifier = ''
    mainClass = 'com.example.clientapi.ClientApiApplication'  // CORRIGÉ

    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'PayeTonKawa'
        )
    }
}

// Compiler warnings
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}