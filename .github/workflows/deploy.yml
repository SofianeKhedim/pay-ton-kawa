# .github/workflows/ci-cd.yml

name: PayeTonKawa CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # D√©tection des changements
  detect-changes:
    runs-on: ubuntu-latest
    name: Detect Changes
    outputs:
      client-api: ${{ steps.changes.outputs.client-api }}
      order-service: ${{ steps.changes.outputs.order-service }}
      product-service: ${{ steps.changes.outputs.product-service }}
      any-changes: ${{ steps.changes.outputs.any-changes }}
    steps:
    - name: üîç Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: üîç Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          client-api:
            - 'client-api/**'
          order-service:
            - 'order-service/**'
          product-service:
            - 'product-service/**'
          any-changes:
            - 'client-api/**'
            - 'order-service/**'
            - 'product-service/**'

  # Tests Client API (Gradle)
  test-client-api:
    runs-on: ubuntu-latest
    name: Client API Tests
    needs: detect-changes
    if: needs.detect-changes.outputs.client-api == 'true'
    
    steps:
    - name: üîç Checkout code
      uses: actions/checkout@v4
      
    - name: ‚òï Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üíæ Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-client-api-${{ hashFiles('client-api/**/*.gradle*', 'client-api/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-client-api-
          
    - name: üß™ Run Client API tests
      working-directory: ./client-api
      run: |
        chmod +x gradlew
        ./gradlew test -Dspring.profiles.active=test
        
    - name: üìä Generate test report
      working-directory: ./client-api
      if: always()
      run: ./gradlew jacocoTestReport
      
    - name: üì§ Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: client-api-test-results
        path: |
          client-api/build/reports/tests/test/
          client-api/build/reports/jacoco/test/html/

  # Tests Product Service (Maven)
  test-product-service:
    runs-on: ubuntu-latest
    name: Product Service Tests
    needs: detect-changes
    if: needs.detect-changes.outputs.product-service == 'true'
    
    steps:
    - name: üîç Checkout code
      uses: actions/checkout@v4
      
    - name: ‚òï Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üíæ Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-product-${{ hashFiles('product-service/**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-product-
          
    - name: üß™ Run Product Service tests
      working-directory: ./product-service
      run: |
        if [ -f "mvnw" ]; then
          chmod +x mvnw
          ./mvnw clean test
        else
          mvn clean test
        fi
        
    - name: üì§ Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: product-service-test-results
        path: product-service/target/surefire-reports/

  # Tests Order Service (Node.js)
  test-order-service:
    runs-on: ubuntu-latest
    name: Order Service Tests
    needs: detect-changes
    if: needs.detect-changes.outputs.order-service == 'true'
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: üîç Checkout code
      uses: actions/checkout@v4
      
    - name: üü¢ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: order-service/package-lock.json
        
    - name: üì¶ Install dependencies
      working-directory: ./order-service
      run: npm ci
      
    - name: üß™ Run Order Service tests
      working-directory: ./order-service
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
        JWT_SECRET: test-secret-key-for-ci
        
    - name: üì§ Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: order-service-test-results
        path: |
          order-service/coverage/
          order-service/test-results.xml

  # Build des services modifi√©s
  build-services:
    runs-on: ubuntu-latest
    name: Build Services
    needs: [detect-changes, test-client-api, test-product-service, test-order-service]
    if: always() && needs.detect-changes.outputs.any-changes == 'true'
    
    steps:
    - name: üîç Checkout code
      uses: actions/checkout@v4
      
    # Build Client API si modifi√©
    - name: ‚òï Set up JDK 17
      if: needs.detect-changes.outputs.client-api == 'true' || needs.detect-changes.outputs.product-service == 'true'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üî® Build Client API
      if: needs.detect-changes.outputs.client-api == 'true'
      working-directory: ./client-api
      run: |
        chmod +x gradlew
        ./gradlew clean bootJar -x test
        echo "‚úÖ Client API built successfully"
        
    - name: üî® Build Product Service
      if: needs.detect-changes.outputs.product-service == 'true'
      working-directory: ./product-service
      run: |
        if [ -f "mvnw" ]; then
          chmod +x mvnw
          ./mvnw clean package -DskipTests
        else
          mvn clean package -DskipTests
        fi
        echo "‚úÖ Product Service built successfully"
        
    # Build Order Service si modifi√©
    - name: üü¢ Set up Node.js
      if: needs.detect-changes.outputs.order-service == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: order-service/package-lock.json
        
    - name: üî® Build Order Service
      if: needs.detect-changes.outputs.order-service == 'true'
      working-directory: ./order-service
      run: |
        npm ci --production
        echo "‚úÖ Order Service built successfully"

  # D√âPLOIEMENT - Seulement si push sur main ET tous les tests passent
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Digital Ocean
    needs: [detect-changes, test-client-api, test-product-service, test-order-service, build-services]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      needs.detect-changes.outputs.any-changes == 'true' &&
      (needs.test-client-api.result == 'success' || needs.test-client-api.result == 'skipped') &&
      (needs.test-product-service.result == 'success' || needs.test-product-service.result == 'skipped') &&
      (needs.test-order-service.result == 'success' || needs.test-order-service.result == 'skipped') &&
      needs.build-services.result == 'success'
    
    steps:
    - name: üöÄ Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          echo "üöÄ D√©marrage du d√©ploiement..."
          
          cd /root/pay-ton-kawa
          git pull origin main
          
          SERVICES_TO_DEPLOY=""
          
          # V√©rifier quels services ont chang√©
          if [ "${{ needs.detect-changes.outputs.client-api }}" == "true" ]; then
            echo "üîÑ Client API modifi√©"
            SERVICES_TO_DEPLOY="$SERVICES_TO_DEPLOY client-api-app"
          fi
          
          if [ "${{ needs.detect-changes.outputs.order-service }}" == "true" ]; then
            echo "üîÑ Order Service modifi√©"
            SERVICES_TO_DEPLOY="$SERVICES_TO_DEPLOY order-service"
          fi
          
          if [ "${{ needs.detect-changes.outputs.product-service }}" == "true" ]; then
            echo "üîÑ Product Service modifi√©"
            SERVICES_TO_DEPLOY="$SERVICES_TO_DEPLOY product-service"
          fi
          
          if [ -z "$SERVICES_TO_DEPLOY" ]; then
            echo "‚ÑπÔ∏è Aucun service √† red√©ployer"
            exit 0
          fi
          
          echo "üî® Rebuild des services modifi√©s: $SERVICES_TO_DEPLOY"
          docker-compose build $SERVICES_TO_DEPLOY
          
          echo "‚ôªÔ∏è Red√©ploiement des services: $SERVICES_TO_DEPLOY"
          docker-compose stop $SERVICES_TO_DEPLOY
          docker-compose rm -f $SERVICES_TO_DEPLOY
          docker-compose up -d $SERVICES_TO_DEPLOY
          
          echo "‚è≥ Attente stabilisation..."
          sleep 30
          
          echo "üìä √âtat des services:"
          docker-compose ps
          
          echo "‚úÖ D√©ploiement s√©lectif termin√© !"

  # Validation finale
  deployment-validation:
    runs-on: ubuntu-latest
    name: Deployment Validation
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
    - name: ‚úÖ Deployment Success
      run: |
        echo "üéâ D√©ploiement r√©ussi !"
        echo "Services d√©ploy√©s avec succ√®s sur Digital Ocean"
        echo "URL: https://votre-domaine.com"

  # Rapport final
  final-report:
    runs-on: ubuntu-latest
    name: Final Report
    needs: [detect-changes, deploy]
    if: always()
    
    steps:
    - name: üìã Generate Final Report
      run: |
        echo "# üöÄ Rapport de CI/CD PayeTonKawa" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìä R√©sum√© des changements" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.detect-changes.outputs.client-api }}" == "true" ]; then
          echo "- ‚úÖ Client API modifi√© et trait√©" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ needs.detect-changes.outputs.product-service }}" == "true" ]; then
          echo "- ‚úÖ Product Service modifi√© et trait√©" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ needs.detect-changes.outputs.order-service }}" == "true" ]; then
          echo "- ‚úÖ Order Service modifi√© et trait√©" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üéØ R√©sultat du d√©ploiement" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ **D√©ploiement r√©ussi** sur Digital Ocean" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
          echo "‚è≠Ô∏è **D√©ploiement ignor√©** (pas de push sur main ou pas de changements)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **D√©ploiement √©chou√©** - V√©rifiez les logs" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*G√©n√©r√© le $(date) par GitHub Actions*" >> $GITHUB_STEP_SUMMARY
