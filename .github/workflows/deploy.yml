# .github/workflows/ci-cd.yml

name: PayeTonKawa CI/CD

on:
  push:
    branches: [ main ]

jobs:
  # Détection des changements
  detect-changes:
    runs-on: ubuntu-latest
    name: Detect Changes
    outputs:
      client-api: ${{ steps.changes.outputs.client-api }}
      order-service: ${{ steps.changes.outputs.order-service }}
      product-service: ${{ steps.changes.outputs.product-service }}
      any-changes: ${{ steps.changes.outputs.any-changes }}
    steps:
    - name: 🔍 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: 🔍 Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          client-api:
            - 'client-api/**'
          order-service:
            - 'order-service/**'
          product-service:
            - 'product-service/**'
          any-changes:
            - 'client-api/**'
            - 'order-service/**'
            - 'product-service/**'

  # Tests Client API (Gradle)
  test-client-api:
    runs-on: ubuntu-latest
    name: Client API Tests
    needs: detect-changes
    if: needs.detect-changes.outputs.client-api == 'true'
    
    steps:
    - name: 🔍 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 💾 Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-client-api-${{ hashFiles('client-api/**/*.gradle*', 'client-api/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-client-api-
          
    - name: 🧪 Run Client API tests
      working-directory: ./client-api
      run: |
        chmod +x gradlew
        ./gradlew test -Dspring.profiles.active=test

  # Tests Product Service (Maven)
  test-product-service:
    runs-on: ubuntu-latest
    name: Product Service Tests
    needs: detect-changes
    if: needs.detect-changes.outputs.product-service == 'true'
    
    steps:
    - name: 🔍 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 💾 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-product-${{ hashFiles('product-service/**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-product-
          
    - name: 🧪 Run Product Service tests
      working-directory: ./product-service
      run: |
        if [ -f "mvnw" ]; then
          chmod +x mvnw
          ./mvnw clean test
        else
          mvn clean test
        fi

  # Tests Order Service (Node.js)
  test-order-service:
    runs-on: ubuntu-latest
    name: Order Service Tests
    needs: detect-changes
    if: needs.detect-changes.outputs.order-service == 'true'
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 🔍 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: order-service/package-lock.json
        
    - name: 📦 Install dependencies
      working-directory: ./order-service
      run: npm ci
      
    - name: 🧪 Run Order Service tests
      working-directory: ./order-service
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
        JWT_SECRET: test-secret-key-for-ci

  # Validation des tests
  validate-tests:
    runs-on: ubuntu-latest
    name: Validate Tests
    needs: [detect-changes, test-client-api, test-product-service, test-order-service]
    if: always() && needs.detect-changes.outputs.any-changes == 'true'
    
    steps:
    - name: ✅ Check test results
      run: |
        echo "🔍 Vérification des résultats de tests..."
        
        # Vérifier Client API
        if [ "${{ needs.detect-changes.outputs.client-api }}" == "true" ]; then
          if [ "${{ needs.test-client-api.result }}" == "success" ]; then
            echo "✅ Client API: Tests passed"
          elif [ "${{ needs.test-client-api.result }}" == "skipped" ]; then
            echo "❌ Client API: Tests were skipped but service was modified!"
            exit 1
          else
            echo "❌ Client API: Tests failed (${{ needs.test-client-api.result }})"
            exit 1
          fi
        fi
        
        # Vérifier Product Service
        if [ "${{ needs.detect-changes.outputs.product-service }}" == "true" ]; then
          if [ "${{ needs.test-product-service.result }}" == "success" ]; then
            echo "✅ Product Service: Tests passed"
          elif [ "${{ needs.test-product-service.result }}" == "skipped" ]; then
            echo "❌ Product Service: Tests were skipped but service was modified!"
            exit 1
          else
            echo "❌ Product Service: Tests failed (${{ needs.test-product-service.result }})"
            exit 1
          fi
        fi
        
        # Vérifier Order Service
        if [ "${{ needs.detect-changes.outputs.order-service }}" == "true" ]; then
          if [ "${{ needs.test-order-service.result }}" == "success" ]; then
            echo "✅ Order Service: Tests passed"
          elif [ "${{ needs.test-order-service.result }}" == "skipped" ]; then
            echo "❌ Order Service: Tests were skipped but service was modified!"
            exit 1
          else
            echo "❌ Order Service: Tests failed (${{ needs.test-order-service.result }})"
            exit 1
          fi
        fi
        
        echo "🎉 Tous les tests sont passés ! Prêt pour le déploiement."


  # DÉPLOIEMENT - Seulement si push sur main ET tous les tests passent
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Digital Ocean
    needs: [detect-changes, validate-tests]
    if: |
      (needs.test-client-api.result == 'success') ||
      (eeds.test-product-service.result == 'success') ||
      (needs.test-order-service.result == 'success')
    
    steps:
    - name: 🚀 Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          echo "🚀 Démarrage du déploiement..."
          
          cd /root/pay-ton-kawa
          git pull origin main
          
          SERVICES_TO_DEPLOY=""
          
          # Vérifier quels services ont changé
          if [ "${{ needs.detect-changes.outputs.client-api }}" == "true" ]; then
            echo "🔄 Client API modifié"
            SERVICES_TO_DEPLOY="$SERVICES_TO_DEPLOY client-api"
          fi
          
          if [ "${{ needs.detect-changes.outputs.order-service }}" == "true" ]; then
            echo "🔄 Order Service modifié"
            SERVICES_TO_DEPLOY="$SERVICES_TO_DEPLOY order-service"
          fi
          
          if [ "${{ needs.detect-changes.outputs.product-service }}" == "true" ]; then
            echo "🔄 Product Service modifié"
            SERVICES_TO_DEPLOY="$SERVICES_TO_DEPLOY product-service"
          fi
          
          if [ -z "$SERVICES_TO_DEPLOY" ]; then
            echo "ℹ️ Aucun service à redéployer"
            exit 0
          fi
          
          echo "🔨 Rebuild des services modifiés: $SERVICES_TO_DEPLOY"
          docker-compose build $SERVICES_TO_DEPLOY
          
          echo "♻️ Redéploiement des services: $SERVICES_TO_DEPLOY"
          docker-compose stop $SERVICES_TO_DEPLOY
          docker-compose rm -f $SERVICES_TO_DEPLOY
          docker-compose up -d $SERVICES_TO_DEPLOY
          
          echo "⏳ Attente stabilisation..."
          sleep 30
          
          echo "📊 État des services:"
          docker-compose ps
          
          echo "✅ Déploiement sélectif terminé !"

  # Validation finale
  deployment-validation:
    runs-on: ubuntu-latest
    name: Deployment Validation
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
    - name: ✅ Deployment Success
      run: |
        echo "🎉 Déploiement réussi !"
        echo "Services déployés avec succès sur Digital Ocean"

  # Rapport final
  final-report:
    runs-on: ubuntu-latest
    name: Final Report
    needs: [detect-changes, deploy]
    if: always()
    
    steps:
    - name: 📋 Generate Final Report
      run: |
        echo "# 🚀 Rapport de CI/CD PayeTonKawa" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Résumé des changements" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.detect-changes.outputs.client-api }}" == "true" ]; then
          echo "- ✅ Client API modifié et traité" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ needs.detect-changes.outputs.product-service }}" == "true" ]; then
          echo "- ✅ Product Service modifié et traité" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ needs.detect-changes.outputs.order-service }}" == "true" ]; then
          echo "- ✅ Order Service modifié et traité" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Résultat du déploiement" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ **Déploiement réussi** sur Digital Ocean" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
          echo "⏭️ **Déploiement ignoré** (pas de push sur main ou pas de changements)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Déploiement échoué** - Vérifiez les logs" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Généré le $(date) par GitHub Actions*" >> $GITHUB_STEP_SUMMARY
